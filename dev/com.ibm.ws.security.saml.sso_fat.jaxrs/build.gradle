/*******************************************************************************
 * Copyright (c) 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

apply plugin: 'war'

// We aren't making a war for the entire project
war { enabled false }

repositories {
  if (isUsingArtifactory) {
    maven {
      credentials {
        username userProps.getProperty("artifactory.download.user")
        password userProps.getProperty("artifactory.download.token")
      }
      url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
    }
  } else {
    mavenCentral()
  }
}

dependencies {
  /*
   * httpunit 1.7 is NOT honoring CookieProperties.setDomainMatchingStrict(false) CookieProperties.setPathMatchingStrict(false).
   * These are needed to force the JSESSIONID to be sent back to the TFIM server.
   */
  requiredLibs project(':com.ibm.ws.security.saml.sso_fat.common'),
               project(':com.ibm.ws.org.apache.httpcomponents'),
               'commons-codec:commons-codec:1.4',
               'commons-logging:commons-logging:1.1.1',
               'httpunit:httpunit:1.6.2',                           // 1.7 has issues noted above
               'jtidy:jtidy:4aug2000r7-dev',
               'rhino:js:1.6R5'
              
  /*
   * Previously we had an uber jar named htmlunit-2.20-OSGi.jar. It appears to have contained all of
   * the runtime dependencies for htmlunit. Instead of generating an uber jar, we'll add the dependencies
   * here. The uber jar also was configured to be an OSGi bundle, but it is not necessary for this bucket.
   */ 
  requiredLibs project(':com.ibm.ws.org.apache.commons.io'),        // htmlunit-2.44.0 --> 2.8.0
               project(':com.ibm.ws.org.apache.commons.lang3'),     // htmlunit-2.44.0 --> 3.11
               'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
               'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
               'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
               'org.apache.httpcomponents:httpmime:4.5.12',
               'org.brotli:dec:0.1.2',
               'xalan:xalan:2.7.2',
               'xerces:xercesImpl:2.11.0'
}

addRequiredLibraries.dependsOn addJakartaTransformer

/*
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"


/*
 * This is where we will download JARs to.
 */
def downloadDir= "${projectDir}/build/downloads"

/******************************************************************
 ******************************************************************
 **
 ** jaxrsclient.war
 **
 ******************************************************************
 ******************************************************************/
task jaxrsclient_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "jaxrsclient.war"
  classpath = classpath.filter{ false }
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/jaxrsclient.war/resources') {
    include '**'
  }
  /* copy needed files from saml common fat into our app */
  from(zipTree("../com.ibm.ws.security.saml.sso_fat.common/build/libs/com.ibm.ws.security.saml.sso_fat.common.jar")) {
    include 'com/ibm/ws/security/saml20/fat/commonTest/SAMLCommonTestTools.class', 'com/ibm/ws/security/saml20/fat/commonTest/SAMLMessageTools.class', 'com/ibm/ws/security/saml20/fat/commonTest/SAMLConstants.class'
    into "WEB-INF/classes"
  } 
  /* copy needed files from security common fat into our app */
  from(zipTree("../com.ibm.ws.security.fat.common/build/libs/com.ibm.ws.security.fat.common.jar")) {
    include 'com/ibm/ws/security/fat/common/CommonMessageTools.class', 'com/ibm/ws/security/fat/common/ValidationData.class', 'com/ibm/ws/security/fat/common/Constants.class'
    into "WEB-INF/classes"
  }

  from ('build/classes/java/main') {
    include 'com/ibm/ws/jaxrs/fat/jaxrsclient/JaxRSClient.class'
    into 'WEB-INF/classes'
  }

}

/******************************************************************
 ******************************************************************
 **
 ** helloworld.war
 **
 ******************************************************************
 ******************************************************************/
task helloworld_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "helloworld.war"
  classpath = classpath.filter{ false }
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/helloworld.war/resources') {
    include '**'
  }

  from ('build/classes/java/main') {
    include 'com/ibm/ws/jaxrs/fat/helloworld/*.class'
    into 'WEB-INF/classes'
  }

}

assemble.dependsOn helloworld_WAR
assemble.dependsOn jaxrsclient_WAR
/*
 * Configure any auto FVT artifacts.
 */
autoFVT.dependsOn ':com.ibm.ws.security.saml.sso_fat.common:assemble'
autoFVT.doLast {

  /*
   * Copy the local ApacheDS LDAP instances. 
   */
  copy {
    from project(':com.ibm.ws.org.apache.directory.server').projectDir
    into autoFvtDir
    include 'apacheds-2.0.0-M15/**'
  }
  copy {
    from project(':com.ibm.ws.security.saml.sso_fat.common').projectDir
    into autoFvtDir
    include 'securitykeys/**'
  }
  copy {
    from project(':com.ibm.ws.security.saml.sso_fat.common').buildDir
    into autoFvtDir
    include 'shibboleth-idp/**'
  }

  /*****************************************************************
   * Server: com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.sp
   *****************************************************************/
  def serverName = "com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.sp"
  // updateTestServerFiles -->
  // copySAMLTestAppFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  copy {
    from new File(appBuildDir, 'jaxrsclient.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  // copyTestMarker
  copy {
    from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  // copySecurityKeysToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '*.arm'
  }
  copy {
    from new File(projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '.arm'
  }
  // copySecurityDefaultFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
  }
  // copyCommonServerXmlFeatures
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**features*.xml'
  }
  // copyCommonServerXmlMisc
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**misc.xml'
  }
  copy {
    from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include "**fatTestCommon.xml"
  }
  // copyCommonServerXmlRegistry
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**egistry*.xml'
  }
  // copyCommonServerXmlSSL
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**ssl*.xml', '**SSL*.xml'
  }
  // copyCommonServerXmlProvider
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**rovider*.xml', '**.base'
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  // copyCommonServerXmlApplications
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**Application*.xml'
  }
  // copyServerXmlParts
  copy {
    from new File(projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**.xml'
    include '**.base'
  }
  copy {
    from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  
  copy {
    from new File(autoFvtDir, "publish/servers/${serverName}/imports")
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
    include '**/*.orig'
  }

  /*****************************************************************
   * Server: com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.rs
   *****************************************************************/
  serverName = "com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.rs"
  // updateTestServerFiles -->
  // copySAMLTestAppFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
    copy {
    from new File(appBuildDir, 'helloworld.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  // copyTestMarker
  copy {
    from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  // copySecurityKeysToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '*.arm'
  }
  copy {
    from new File(projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '.arm'
  }
  // copySecurityDefaultFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
  }
  // copyCommonServerXmlFeatures
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**features*.xml'
  }
  // copyCommonServerXmlMisc
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**misc.xml'
  }
  copy {
    from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include "**fatTestCommon.xml"
  }
  // copyCommonServerXmlRegistry
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**egistry*.xml'
  }
  // copyCommonServerXmlSSL
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**ssl*.xml', '**SSL*.xml'
  }
  // copyCommonServerXmlProvider
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**rovider*.xml', '**.base'
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  // copyCommonServerXmlApplications
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**Application*.xml'
  }
  // copyServerXmlParts
  copy {
    from new File(projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**.xml'
    include '**.base'
  }
  copy {
    from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  
  copy {
    from new File(autoFvtDir, "publish/servers/${serverName}/imports")
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
    include '**/*.orig'
  }

  /*****************************************************************
   * Server: com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.merged_sp_rs
   *****************************************************************/
  serverName = "com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.merged_sp_rs"
  // updateTestServerFiles -->
  // copySAMLTestAppFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  copy {
    from new File(appBuildDir, 'jaxrsclient.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  copy {
    from new File(appBuildDir, 'helloworld.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  // copyTestMarker
  copy {
    from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  // copySecurityKeysToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '*.arm'
  }
  copy {
    from new File(projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*.jks', '.arm'
  }
  // copySecurityDefaultFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
  }
  // copyCommonServerXmlFeatures
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**features*.xml'
  }
  // copyCommonServerXmlMisc
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**misc.xml'
  }
  copy {
    from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include "**fatTestCommon.xml"
  }
  // copyCommonServerXmlRegistry
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**egistry*.xml'
  }
  // copyCommonServerXmlSSL
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**ssl*.xml', '**SSL*.xml'
  }
  // copyCommonServerXmlProvider
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**rovider*.xml', '**.base'
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  // copyCommonServerXmlApplications
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**Application*.xml'
  }
  // copyServerXmlParts
  copy {
    from new File(projectDir, 'publish/files/serversettings')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**.xml'
    include '**.base'
  }
  copy {
    from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
    into new File(autoFvtDir, "publish/servers/${serverName}/imports")
    include '**/**'
  }
  
  copy {
    from new File(autoFvtDir, "publish/servers/${serverName}/imports")
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
    include '**/*.orig'
  }

  /*****************************************************************
   * Server: com.ibm.ws.security.saml.sso-2.0_fat.shibboleth
   *****************************************************************/
  serverName = "com.ibm.ws.security.saml.sso-2.0_fat.shibboleth"
  // updateShibbolethServerFiles -->
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, "publish/servers/${serverName}/configs")
    into new File(autoFvtDir, "publish/servers/${serverName}/configs")
  }
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, "publish/servers/${serverName}/bootstrap.properties")
    into new File(autoFvtDir, "publish/servers/${serverName}")
  }
  // copyTestMarker
  copy {
    from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
  }
  // enable ldap trace
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/envVars/jvm.options')
    into new File(autoFvtDir, "publish/servers/${serverName}")
  }

// The restricted policy files have been standard for a while now. They shouldn't be needed.
//
//  copy { 
//    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/policyFiles')
//    into new File(autoFvtDir, "publish/servers/${serverName}/policyFiles")
//  }
  // copyShibbolethTestAppFilesToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/idp.war')
    into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
  }
  // copySecurityKeysToServer
  copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include "*.jks", "*.arm"
  }
  copy {
    from new File(projectDir, 'securitykeys')
    into new File(autoFvtDir, "publish/servers/${serverName}")
    include "*.jks", "*.arm"
  }
}
